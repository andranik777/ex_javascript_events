<div class="tab-pane active" id="home1" role="tabpanel">
<h2>1. Introduction</h2>
<p>√Ä pr√©sent tu sais coder en JS, parcourir le DOM, modifier des √©l√©ments HTML et d√©tecter des √©v√®nements utilisateurs&nbsp;: il est temps de <a href="https://www.youtube.com/watch?v=xEr7Vjr6YOc" target="blank">r√©unir toutes ces connaissances</a>&nbsp;! Tu vas enfin cr√©er ta premi√®re page interactive.</p>
<p>Dans ce projet nous allons te donner une page HTML d√©j√† faite (et qui ne sera pas sans te rappeler un projet pass√©‚Ä¶). Tu vas rajouter un tas de fonctionnalit√©s sur cette page afin qu'elle r√©agisse aux actions d'un visiteur. √Ä toi de jouer&nbsp;! </p>
<p>PS&nbsp;: tout comme le projet sur les modifications du DOM&nbsp;: <b>il est interdit de toucher au fichier HTML</b>&nbsp;! On va tout faire par JavaScript.</p>

<h2>2. Le projet</h2>
<h3>Mise en place de l'exo</h3>
<p>Commence par t√©l√©charger <a href="https://github.com/TheHackingProject/JS_events" target="blank">ce repo GitHub</a>&nbsp;: il contient la page HTML <code>exo_events.html</code> que nous allons pimper.</p>
<p>Maintenant rajoute dans le m√™me dossier un fichier <code>script.js</code> qui va contenir ton code JavaScript (je l'ai d√©j√† appel√© dans le fichier HTML donc pas besoin de le faire).</p>

<h3>Avant de se lancer‚Ä¶</h3>
<p>On va te rab√¢cher les oreilles avec le m√™me genre de conseils que pour la journ√©e pr√©c√©dente‚Ä¶ Mais si tu ne les as pas bien en t√™te, tu vas passer une sale apr√®s-midi&nbsp;!</p>
<ul>
  <li><b>Quand tu cherches √† modifier un √©l√©ment ou √† r√©agir √† un event le concernant, assure-toi d'abord que tu pointes bien dessus</b> (quitte √† l'imprimer en console). Ensuite seulement tu peux essayer de lui appliquer la modification. Si tu fais les 3 choses en m√™me temps et que √ßa marche pas, tu ne sais pas quelle √©tape tu as rat√©&nbsp;: tu pointes vers un mauvais √©l√©ment&nbsp;? C'est la fonction de modification qui est mal √©crite&nbsp;? Ou bien c'est l'√©v√®nement que tu n'arrives pas √† d√©tecter&nbsp;? <b>Fais les choses pas √† pas</b>&nbsp;!</li>
  <li><b>"si √ßa bogue, mets des <code>console.log</code>"</b>&nbsp;! Affiches tes variables, tes √©l√©ments HTML et confirment qu'ils ont les valeurs auxquelles tu t'attends.</li>
  <li>Rappelle-toi&nbsp;: de nombreuses fonctions pour parcourir le DOM renvoient des listes d'√©l√©ments (qui s'apparentent √† des arrays). <b>Et on ne peut pas appliquer une fonction de modification sur une liste</b>&nbsp;: il faut l'appliquer sur un √©l√©ment de cette liste (sinon on obtient une erreur). En gros, si tu fais <code>document.getElementsByClassName("coucou").innerHTML = "salut"</code> tu as une erreur. Il faut rajouter un <code>[x]</code> pour choisir un √©l√©ment de la liste sur lequel appliquer la modification&nbsp;: <code>document.getElementsByClassName("coucou")[0].innerHTML = "salut"</code> √ßa marche. </li>
  <li>Les modifications demand√©es sont nombreuses&nbsp;: <b>essaye a minima d'impl√©menter toutes les fonctionnalit√©s jusqu'√† la n¬∞5</b>. Les autres c'est bonus&nbsp;!</li>
</ul>
<p>On va te mettre des petits <b>Indices</b> afin de te guider. Ils seront √©crits en blanc sur blanc pour que les plus √† l'aise puissent essayer de faire sans. Ceux qui veulent les lire n'auront qu'√† s√©lectionner la ligne avec leur souris pour la mettre en surbrillance&nbsp;: <a href="https://www.youtube.com/watch?v=b6zEaA-nAlU" target="blank">le texte se r√©v√®lera alors</a> ‚ú®‚ú®‚ú®</p>

<h3>Fonctionnalit√© 1 :</h3>
<p>On commence par un petit √©chauffement&nbsp;: lorsque l'utilisateur va cliquer sur le footer (portant le tag <code>&lt;footer&gt;</code>), tu vas afficher le mot "clique" en console.</p>
<p>Cette fonctionnalit√© doit √™tre cod√©e avec un <code>addEventListener("click", function(){ }</code> car c'est une bonne habitude √† prendre&nbsp;! üòá</p>

<h3>Fonctionnalit√© 1-bis :</h3>
<p>Maintenant on va upgrader cette premi√®re fonctionnalit√©&nbsp;: lorsque l'utilisateur va cliquer sur le footer, tu vas afficher en console "clic num√©ro x" avec x qui commence √† 1 et s'incr√©mente de +1 √† chaque clic.</p>
<p><b>Indice :</b> <span style="color: white;">Rien de tr√®s compliqu√© par rapport √† la version pr√©c√©dente&nbsp;: d√©clare une variable qui va servir de compteur et incr√©mente-la quand l'√©v√®nement a lieu&nbsp;!</span></p>

<h3>Fonctionnalit√© 2&nbsp;:</h3>
<p>On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus. C'est quoi un "hamburger menu"&nbsp;? <a href="https://fr.wikipedia.org/wiki/Menu_lat%C3%A9ral" target="blank">C'est √ßa</a>, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.</p>
<p>Tu vas faire que si quelqu'un clique sur ce bouton, l'√©l√©ment HTML portant l'Id <code>navbarHeader</code> perde sa classe <code>collapse</code>. Une fois que √ßa, √ßa marche, fait que si on clique √† nouveau dessus, la classe <code>collapse</code> soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id <code>navbarHeader</code> </p>
<p><b>Indice :</b> <span style="color: white;">Il existe une fonction qui permet de rajouter une classe si elle n'est pas d√©j√† pr√©sente et l'enlever si elle est d√©j√† pr√©sente. C'est "toggle". Tu peux l'utiliser ainsi&nbsp;: elementDuDOM.classList.toggle("nomDeLaClasse") </span></p>

<h3>Fonctionnalit√© 3 :</h3>
<p>√Ä pr√©sent, on va faire cela&nbsp;: si on clique sur le bouton "Edit" de la premi√®re card, le texte de la card va se mettre en <span style="color: red">rouge</span> de fa√ßon irr√©versible (sauf si on recharge la page). √Ä toi de jouer&nbsp;!</p>
<p><b>Indice :</b> <span style="color: white;">Commence par bien pointer sur la premi√®re card en entier (stocke-la dans une variable puis affiche-la en console pour confirmer que tu l'as bien point√©). <br>
Puis pointe vers le bouton Edit de cette card (idem&nbsp;: stocke-le dans une variable et affiche-le en console). <br>
Une fois que √ßa c'est bien fait, tu peux facilement rajoute un style ="color: red" au texte de la card&nbsp;!  </span></p>

<h3>Fonctionnalit√© 4 :</h3>
<p>On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe&nbsp;: si on clique sur le bouton "Edit" de la <b>deuxi√®me</b> card, le texte de la card va se mettre en <span style="color: green">vert</span>. Si on re-clique dessus, il redevient comme avant&nbsp;! Tu l'as compris, il va falloir que tu cherches comment faire un "toggle" sur le style du texte. C'est plus compliqu√© que sur une classe. </p>
<p><b>Indice :</b> <span style="color: white;">Reprend le code de la fonctionnalit√© 3 et adapte-le pour qu'il marche sur la 2√®me card (et en rempla√ßant le rouge par du vert). <br>
Maintenant, pour le toggle, il va falloir te faire un petit if / else dans ton AddEventListener. On te donne le d√©but&nbsp;: <br>
if (secondCard.style.color === 'green'){ <br>
secondCard.style.color = '' ; <br>
}else ‚Ä¶</span></p>

<h3>Fonctionnalit√© 5 :</h3>
<p>Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher&nbsp;: si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS. Si possible, rends cette fonctionnalit√© r√©versible (un nouveau double-clic fait tout revenir √† la normale).</p>
<p><b>Indice :</b> <span style="color: white;">Cherche sur Google comment d√©sactiver le tag &lt;link&gt; avec JavaScript.</span></p>

<h3>Fonctionnalit√© 6 :</h3>
<p>T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction&nbsp;! C'est top&nbsp;! On va commencer √† corser les choses.</p>
<p>La fonctionnalit√© sera la suivante&nbsp;: si un utilisateur passe sa souris sur le bouton "View" d'une card (n'importe laquelle), celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra qu'√† 20&nbsp;% de sa taille d'origine et les boutons "Edit" / "View" restent visibles. Cette fonction sera r√©versible&nbsp;: s'il repasse sa souris, la card redevient normale&nbsp;!</p>
<p><b>Indice 1 :</b> <span style="color: white;">Commence par impl√©menter cette fonctionnalit√© sur une card avant d'essayer de les faire toutes.</span></p>
<p><b>Indice 2 :</b> <span style="color: white;">Tu vas devoir appliquer les le√ßons apprises sur la fonctionnalit√© 2 (toggle de la classe "collapse") et sur la fonctionnalit√© 3 (toggle sur le style appliqu√© √† l'image&nbsp;: tant√¥t on lui rajoute "width: 20&nbsp;%;", tant√¥t on lui enl√®ve).</span></p>
<p><b>Indice 3 :</b> <span style="color: white;">Une fois que √ßa marche sur une card, fait une boucle for sur la liste des 6 cards (a priori tu as extrait la card d'une liste d'√©l√©ments HTML non?) pour appliquer un addEventListener √† chacune. /!\ mets bien le compteur de ta boucle en "let", sinon tu vas avoir des surprises‚Ä¶ =&gt; <a href="https://pawelgrzybek.com/loop-through-a-collection-of-dom-elements/" target="_blank" style="color: white;">clique ici pour acc√©der √† une ressource qui parle de √ßa</a> </span></p>

<h3>Fonctionnalit√© 7 :</h3>
<p>Allez on va rajouter un peu de WTF dans la page&nbsp;: si un utilisateur clique sur le bouton gris <code>==&gt;</code>, la derni√®re card (en bas √† droite) va passer en premier (en haut √† gauche). On va pouvoir faire tourner les cards&nbsp;!</p>
<p><b>Indice :</b> <span style="color: white;">Cette fonctionnalit√© n'est pas ultra complexe en fait&nbsp;: il faut pointer sur le noeud-parent des 6 cards puis d√©placer la card n¬∞6 en premier avec un insertBefore</span>.</p>

<p><b>Petite remarque :</b> tu vas r√©aliser que si tu m√©langes les cards, il est fort probable que la fonctionnalit√© 6 va se mettre √† faire n'importe quoi. Si tu survoles un bouton "View", c'est une autre card qui va se r√©duire. Si tu arrives √† corriger √ßa, c'est cool mais la consigne est d'ignorer ce souci pour le moment.</p>

<h3>Fonctionnalit√© 8 :</h3>
<p>√âvidemment tu t'y attendais&nbsp;: on va faire tourner les card dans l'autre sens aussi. Donc si un utilisateur clique sur le bouton bleu <code>&lt;==</code>, la premi√®re card devra passer en dernier. √Ä premi√®re vue, tu te dis que si tu as r√©ussi √† faire la fonctionnalit√© pr√©c√©dente, celle-ci c'est du gateau... sauf qu'il y a quelques pi√®ges. üòà </p>
<p><b>Indice 1 :</b> <span style="color: white;">Premier pi√®ge&nbsp;: il y a un lien HTML sur le bouton et si tu cliques dessus, une page s'ouvre&nbsp;! Il faut que tu bloques ce comportement par d√©faut (via l'objet event - cf le cours).</span></p>
<p><b>Indice 2 :</b> <span style="color: white;">Deuxi√®me pi√®ge&nbsp;: tu as utilis√© "insertBefore" pour la fonctionnalit√© pr√©c√©dente mais il n'y a pas de "insertAfter". Une solution est de consid√©rer qu'un "insertAfter un √©l√©ment A" serait, s'il existait, √©quivalent √† faire un "insertBefore sur le n≈ìud APRES l'√©l√©ment A". Et tu peux pointer sur un noeud APRES un √©l√©ment en faisant "lastCard.nextSibling"</span>.</p>

<h3>Fonctionnalit√© 9 :</h3>
<p>Bon si t'es arriv√© jusque-l√†, c'est que t'as besoin d'un peu de challenge. Du coup je t'ai concoct√© une fonctionnalit√© de derri√®re les fagots, sp√©cialement con√ßue pour les moussaillons pas piqu√©s des hannetons (this sentence is brought to you by www.vieilles-expressions.fr). Voici ce qu'elle va devoir faire :</p>
<ul>
  <li>La fonctionnalit√© se d√©clenchera si le logo de la page (JS &amp; Events) est s√©lectionn√© et qu'on appuie sur une touche sp√©cifique du clavier.</li>
  <li>Si l'utilisateur presse la touche "a", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† gauche de l'√©cran.</li>
  <li>Si l'utilisateur presse la touche "y", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap au milieu de l'√©cran.</li>
  <li>Si l'utilisateur presse la touche "p", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† droite de l'√©cran.</li>
  <li>Si l'utilisateur presse la touche "b", tout redevient normal.</li>
</ul>
<p><b>Indice 1 :</b> <span style="color: white;">L'event √† utiliser est "keypress", appliqu√© au texte "JS &amp; Events" (ou, mieux, √† une div le contenant).</span></p>
<p><b>Indice 2 :</b> <span style="color: white;">Pour modifier le rendu visuel de toute la page, il faut que tu joues avec les classes de &lt;body&gt;.</span></p>
<p><b>Indice 3 :</b> <span style="color: white;">Pour mettre tout sur 4 colonnes, rajoute la classe col-4. Pour les placer au milieu ou √† droite, rajoute la classe offset-md-4 ou offset-md-8.</span></p>
<p><b>Indice 4 :</b> <span style="color: white;">Pour √©viter que les classes s'accumulent, et pour que chaque touche ait un comportement propre, retire toutes les classes du &lt;body&gt; √† chaque fois qu'un "keypress" est d√©tect√©. Ensuite seulement tu rajoutes les classes n√©cessaires.</span></p>


<h2>3. Rendu attendu</h2>
<p>Un repo GitHub par groupe de pair-programming contenant la page HTML mais surtout le fichier <code>script.js</code> avec tout le code dedans&nbsp;!</p>
</div>
